{"version":3,"sources":["store/types.ts","store/action.ts","components/router/Router.tsx","components/router/Link.tsx","helpers/classNameHelper.ts","components/HeaderNavigation.tsx","logo.svg","components/Header.tsx","services/intervalResource.ts","services/staticResource.ts","services/apiService.ts","services/resource.ts","components/EditorPage.tsx","components/shared/Button.tsx","components/PlayerCounter.tsx","banner.svg","components/HomePage.tsx","components/router/Route.tsx","components/App.tsx","serviceWorker.js","store/store.ts","index.js"],"names":["CHANGE_PAGE","SET_PACKS","START_LOADING","SET_ERROR","changePage","page","type","constructUrlFromParams","url","window","location","origin","pathname","extractParamsFromUrl","URL","searchParams","get","Router","children","dispatch","useDispatch","useEffect","href","handlePopState","e","state","addEventListener","removeEventListener","Link","object","className","to","routeToPage","pageName","history","pushState","useRouteToPage","useSelector","classes","active","Object","keys","filter","key","join","onClick","preventDefault","HeaderNavigation","Header","style","backgroundImage","logo","alt","src","IntervalResource","getter","interval","setInterval","markDirty","listeners","Set","getterPromise","a","this","value","notify","callback","add","unsubscribe","delete","forEach","l","ACTIVITY_ENDPOINT","process","ApiService","instance","ActiveUserCount","fetch","URLSearchParams","app","then","r","json","data","console","error","total","undefined","mobends","versions","version","createTask","resources","deps","editorPageTask","activeUserCount","EditorPage","errorMessage","task","useState","values","setValues","cancelled","resourceKeys","resourcePromises","map","unsubscribers","resourceKey","resource","push","subscribe","old","Promise","all","result","valuesMap","index","unsub","useResources","Button","link","PlayerCounter","setValue","newValue","useResource","HomePage","banner","Route","component","App","Boolean","hostname","match","initialState","packs","packsList","loading","store","createStore","action","packsMap","pack","id","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c93e687d.chunk.js","sourcesContent":["export const CHANGE_PAGE = 'CHANGE_PAGE';\r\nexport const SET_PACKS = 'SET_PACKS';\r\nexport const START_LOADING = 'START_LOADING';\r\nexport const SET_ERROR = 'SET_ERROR';\r\n\r\nexport interface ChangePageAction {\r\n    type: typeof CHANGE_PAGE\r\n    page: string | null\r\n}\r\n\r\nexport interface SetPacksAction {\r\n    type: typeof SET_PACKS\r\n    packs: BendsPack[]\r\n}\r\n\r\nexport interface StartLoadingAction {\r\n    type: typeof START_LOADING\r\n}\r\n\r\nexport interface SetErrorAction {\r\n    type: typeof SET_ERROR\r\n    error: string\r\n}\r\n\r\nexport type Action = ChangePageAction | SetPacksAction | StartLoadingAction | SetErrorAction;\r\n\r\nexport interface BendsPack {\r\n    id: string\r\n    name: string\r\n    likes: number\r\n    createdOn: Date\r\n}\r\n\r\nexport type Dict<T> = {[key: string]: T};\r\n\r\nexport interface RootState {\r\n    page: string | null\r\n    packs: Dict<BendsPack>\r\n    packsList: string[]\r\n    loading: boolean\r\n    errorMessage: string\r\n}","import { SET_PACKS, ChangePageAction, BendsPack, SetPacksAction, CHANGE_PAGE, SetErrorAction, SET_ERROR, StartLoadingAction, START_LOADING } from './types';\r\n\r\nexport function changePage(page: string | null): ChangePageAction {\r\n    return { type: CHANGE_PAGE, page };\r\n}\r\n\r\nexport function setPacks(packs: BendsPack[]): SetPacksAction {\r\n    return { type: SET_PACKS, packs };\r\n}\r\n\r\nexport function startLoading(): StartLoadingAction {\r\n    return { type: START_LOADING };\r\n}\r\n\r\nexport function setError(error: string): SetErrorAction {\r\n    return { type: SET_ERROR, error };\r\n}","import React, { useEffect, ReactNode } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { changePage } from '../../store/action';\r\n\r\nexport interface RouterProps {\r\n    children?: ReactNode\r\n}\r\n\r\ninterface RouteParams {\r\n    page: string | null\r\n}\r\n\r\nexport function constructUrlFromParams({ page }: RouteParams): string {\r\n    let url = window.location.origin + window.location.pathname;\r\n    if (page) {\r\n        url += `?page=${page}`;\r\n    }\r\n    return url;\r\n}\r\n\r\nexport function useRouteToPage() {\r\n    const dispatch = useDispatch();\r\n\r\n    return (pageName: string | null) => {\r\n        let url = constructUrlFromParams({ page: pageName });\r\n\r\n        window.history.pushState({\r\n            url,\r\n        }, '', url);\r\n\r\n        dispatch(changePage(pageName));\r\n    }\r\n}\r\n\r\nexport function extractParamsFromUrl(url: string) {\r\n    const urlObject = new URL(url);\r\n    const searchParams = urlObject.searchParams;\r\n\r\n    return {\r\n        page: searchParams.get('page'),\r\n    };\r\n}\r\n\r\nexport function Router({ children }: RouterProps) {\r\n    const dispatch = useDispatch();\r\n    \r\n    useEffect(() => {\r\n        const { page } = extractParamsFromUrl(window.location.href);\r\n        dispatch(changePage(page));\r\n    }, [ dispatch ]);\r\n\r\n    useEffect(() => {\r\n        const handlePopState = (e: PopStateEvent) => {\r\n            if (e.state) {\r\n                const { page } = extractParamsFromUrl(e.state.url);\r\n                dispatch(changePage(page));\r\n            }\r\n        };\r\n        window.addEventListener('popstate', handlePopState);\r\n        return () => window.removeEventListener('popstate', handlePopState);\r\n    }, [ dispatch ]);\r\n\r\n    return <div>{ children }</div>;\r\n}","import React, { ReactNode } from 'react';\r\nimport { useRouteToPage, constructUrlFromParams } from './Router';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../store/types';\r\nimport { combineClasses } from '../../helpers/classNameHelper';\r\n\r\nexport interface LinkProps {\r\n    children?: ReactNode\r\n    className?: string\r\n    to: string | null\r\n}\r\n\r\nexport function Link({ className, children, to }: LinkProps) {\r\n\r\n    const routeToPage = useRouteToPage();\r\n    const page = useSelector((state: RootState) => state.page);\r\n\r\n    const handleClick = (e: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\r\n        e.preventDefault();\r\n        routeToPage(to);\r\n    };\r\n\r\n    const classes = combineClasses({\r\n        active: page === to,\r\n    });\r\n\r\n    return (\r\n        <a href={constructUrlFromParams({ page: to })} onClick={handleClick} className={[className, classes].join(' ')}>\r\n            { children }\r\n        </a>\r\n    );\r\n}","export function combineClasses(object: {[key: string]: boolean}): string {\r\n    return Object.keys(object).filter(key => object[key]).join(' ');\r\n}","import React from 'react';\r\nimport './HeaderNavigation.scss';\r\nimport { Link } from './router/Link';\r\n\r\nexport function HeaderNavigation() {\r\n    return (\r\n        <nav className='HeaderNavigation'>\r\n            <Link to={null}>Home</Link>\r\n            <Link to='editor'>Animation Editor</Link>\r\n        </nav>\r\n    );\r\n}","export default __webpack_public_path__ + \"static/media/logo.484c49ab.svg\";","import React from 'react';\r\nimport './Header.scss';\r\n\r\nimport { HeaderNavigation } from './HeaderNavigation';\r\nimport logo from '../logo.svg';\r\nimport { Link } from './router/Link';\r\n\r\nexport function Header() {\r\n    return (\r\n        <header className=\"Header\">\r\n            <Link className=\"Header__logo\" to={null}>\r\n                <span style={{ backgroundImage: `url(${logo})` }}></span>\r\n                <img alt='Logo' src={logo}></img>\r\n            </Link>\r\n            \r\n            <HeaderNavigation />\r\n        </header>\r\n    );\r\n}","import { IResource } from './resource';\nimport { StaticResource } from './staticResource';\n\nexport class IntervalResource<T> extends StaticResource<T> {\n    constructor(getter: () => Promise<T>, interval: number) {\n        super(getter);\n\n        setInterval(() => {\n            this.markDirty();\n            this.get();\n        }, interval);\n    }\n}\n","import { IResource, IResourceChangeListener } from './resource';\n\nexport class StaticResource<T> implements IResource<T> {\n    private listeners: Set<IResourceChangeListener<T>> = new Set();\n    private getterPromise: Promise<T>|null = null;\n\n    constructor(private readonly getter: () => Promise<T>) {}\n\n    async get(): Promise<T> {\n        if (this.getterPromise === null) {\n            this.getterPromise = this.getter();\n            \n            const value = await this.getterPromise;\n            this.notify(value);\n            return value;\n        }\n\n        return await this.getterPromise;\n    }\n\n    markDirty(): void {\n        this.getterPromise = null;\n    }\n\n    subscribe(callback: IResourceChangeListener<T>): () => void {\n        this.listeners.add(callback);\n\n        return () => this.unsubscribe(callback);\n    }\n\n    unsubscribe(callback: IResourceChangeListener<T>): void {\n        this.listeners.delete(callback);\n    }\n\n    private notify(value: T) {\n        this.listeners.forEach(l => l(value));\n    }\n}","import { IntervalResource } from './intervalResource';\r\n\r\nconst API_ENDPOINT = process.env.REACT_APP_MOBENDS_API_URL || 'localhost:5000';\r\nconst ACTIVITY_ENDPOINT = `${API_ENDPOINT}/activity`;\r\n\r\nexport class ApiService {\r\n    public static readonly instance = new ApiService();\r\n}\r\n\r\nexport const ActiveUserCount = new IntervalResource(async () => {\r\n    let data;\r\n\r\n    const appId = 'mobends';\r\n\r\n    try {\r\n        data = await fetch(`${ACTIVITY_ENDPOINT}/pings?` + new URLSearchParams({\r\n            app: appId,\r\n        })).then(r => r.json());\r\n    }\r\n    catch (e) {\r\n        console.error(`Unexpected error:`, e);\r\n        return 0;\r\n    }\r\n\r\n    let total = 0;\r\n    if (data.mobends !== undefined) {\r\n        const versions = Object.keys(data.mobends);\r\n        for (const version of versions) {\r\n            total += data.mobends[version];\r\n        }\r\n    }\r\n\r\n    return total;\r\n}, 10000); // Updating every 10 seconds","import { useEffect, useState } from 'react';\n\nexport type IResourceChangeListener<T> = (value: T) => void;\n\nexport interface IResource<T> {\n    get(): Promise<T>;\n    subscribe(callback: IResourceChangeListener<T>): () => void;\n    unsubscribe(callback: IResourceChangeListener<T>): void;\n}\n\ntype ResourceMap<T> = {[key in keyof T]: IResource<T[key]>};\n\nexport interface ITask<T extends object> {\n    key: string;\n    deps: ResourceMap<T>;\n}\n\nexport function createTask<T extends object>(key: string, resources: ResourceMap<T>): ITask<T> {\n    return {\n        key,\n        deps: resources,\n    };\n}\n\nexport function useResource<T>(resource: IResource<T>): T|null {\n    const [value, setValue] = useState<T|null>(null);\n\n    useEffect(() => {\n        let cancelled = false;\n\n        resource.get().then(value => {\n            if (!cancelled)\n                setValue(value);\n        });\n\n        // Subscribe to future updates.\n        const unsubscribe = resource.subscribe(newValue => {\n            setValue(newValue);\n        });\n\n        return () => {\n            unsubscribe();\n\n            cancelled = true;\n        };\n    }, []);\n\n    return value;\n}\n\nexport function useResources<T extends object>(task: ITask<T>): T|null {\n    const [values, setValues] = useState<null|T>(null);\n\n    const { key: taskKey, deps } = task;\n\n    useEffect(() => {\n        let cancelled = false;\n\n        const resourceKeys = Object.keys(deps);\n        const resourcePromises = resourceKeys.map(key => (deps as any)[key].get());\n\n        const unsubscribers: (() => void)[] = [];\n\n        for (const resourceKey of resourceKeys) {\n            const resource = (deps as any)[resourceKey] as IResource<any>;\n\n            unsubscribers.push(resource.subscribe((value) => {\n                setValues(old => ({\n                    ...old,\n                    [resourceKey]: value\n                } as any));\n            }));\n        }\n\n        Promise.all(resourcePromises).then(result => {\n            if (cancelled) {\n                return;\n            }\n\n            let valuesMap: any = {};\n\n            resourceKeys.forEach((key, index) => {\n                valuesMap[key] = result[index];\n            });\n\n            setValues(valuesMap);\n        });\n\n        return () => {\n            cancelled = true;\n\n            for (const unsub of unsubscribers) {\n                unsub();\n            }\n        };\n    }, [deps, setValues]);\n\n    return values;\n}\n","import React from 'react';\r\nimport './EditorPage.scss';\r\n\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../store/types';\r\nimport { ActiveUserCount } from '../services/apiService';\r\nimport { createTask, useResources } from '../services/resource';\r\n\r\n\r\nconst editorPageTask = createTask('EDITOR_PAGE_TASK', {\r\n    activeUserCount: ActiveUserCount\r\n});\r\n\r\nexport function EditorPage() {\r\n    const errorMessage = useSelector((state: RootState) => state.errorMessage);\r\n\r\n    const resources = useResources(editorPageTask);\r\n\r\n    return (\r\n        <div className=\"EditorPage\">\r\n            <div className=\"EditorPage__error\">{ errorMessage }</div>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport './Button.scss';\r\n\r\nexport interface ButtonProps {\r\n    children?: React.ReactChild\r\n    link?: string,\r\n}\r\n\r\nexport function Button({ children, link }: ButtonProps) {\r\n    if (link) {\r\n        return <a className=\"Button\" href={link}>{ children }</a>;\r\n    } else {\r\n        return <button className=\"Button\">{ children }</button>;\r\n    }\r\n}","import React from 'react';\r\nimport { ActiveUserCount } from '../services/apiService';\r\nimport { createTask, useResource, useResources } from '../services/resource';\r\n\r\n/* Styles */\r\nimport './PlayerCounter.scss';\r\n\r\nimport { Button } from './shared/Button';\r\n\r\nconst playerCounterTask = createTask('PLAYER_COUNTER', {\r\n    activeUserCount: ActiveUserCount\r\n});\r\n\r\nexport function PlayerCounter() {\r\n    const activeUserCount = useResource(ActiveUserCount);\r\n\r\n    return (\r\n        <div className=\"PlayerCounter\">\r\n            <p>Online users of Mo' Bends:</p>\r\n            <p className=\"count\">{activeUserCount || 0}</p>\r\n            <Button link=\"https://www.curseforge.com/minecraft/mc-mods/mo-bends\">Download Mo' Bends</Button>\r\n        </div>\r\n    );\r\n}","export default __webpack_public_path__ + \"static/media/banner.f35c09a3.svg\";","import React from 'react';\r\nimport './HomePage.scss';\r\n\r\nimport { PlayerCounter } from './PlayerCounter';\r\nimport banner from '../banner.svg';\r\n\r\nexport function HomePage() {\r\n    return (\r\n        <div className=\"HomePage\">\r\n            <img className=\"HomePage__banner\" alt=\"Banner\" src={banner} />\r\n            <PlayerCounter />\r\n        </div>\r\n    );\r\n}","import { useSelector } from 'react-redux';\r\nimport { RootState } from '../../store/types';\r\n\r\nexport interface RouteProps {\r\n    page: string | null\r\n    component: JSX.Element\r\n}\r\n\r\nexport function Route({page, component}: RouteProps) {\r\n    const currentPage = useSelector((state: RootState) => state.page);\r\n\r\n    const showRoute = page === currentPage;\r\n    return showRoute ? component : null;\r\n}","import React from 'react';\r\nimport './App.scss';\r\n\r\nimport SimpleBar from 'simplebar-react';\r\nimport 'simplebar/dist/simplebar.min.css';\r\nimport { Header } from './Header';\r\nimport { EditorPage } from './EditorPage';\r\nimport { HomePage } from './HomePage';\r\nimport { Route } from './router/Route';\r\nimport { Router } from './router/Router';\r\n\r\nfunction App() {\r\n    return (\r\n        <Router>\r\n            <div className=\"App\">\r\n                <Header />\r\n                <div className=\"App__content\">\r\n                    <SimpleBar>\r\n                        <Route page=\"editor\" component={<EditorPage />} />\r\n                        <Route page={null} component={<HomePage />} />\r\n                    </SimpleBar>\r\n                </div>\r\n            </div>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { createStore } from 'redux';\r\nimport { RootState, SET_PACKS, CHANGE_PAGE, BendsPack, Action, SET_ERROR, START_LOADING } from './types';\r\n\r\nconst initialState: RootState = {\r\n    page: null,\r\n    packs: {},\r\n    packsList: [],\r\n    loading: false,\r\n    errorMessage: '',\r\n};\r\n\r\nconst reducer = (state: RootState = initialState, action: Action) => {\r\n    switch(action.type) {\r\n        case CHANGE_PAGE:\r\n            return {\r\n                ...state,\r\n                page: action.page,\r\n            };\r\n        case SET_PACKS:\r\n            const packsMap: {[key: string]: BendsPack} = {};\r\n            action.packs.forEach(pack => packsMap[pack.id] = pack);\r\n\r\n            return {\r\n                ...state,\r\n                packs: {\r\n                    ...state.packs,\r\n                    ...packsMap,\r\n                },\r\n                packsList: action.packs.map(pack => pack.id),\r\n            };\r\n        case START_LOADING:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                errorMessage: '',\r\n            };\r\n        case SET_ERROR:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                errorMessage: action.error,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const store = createStore(\r\n    reducer,\r\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__()\r\n);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport './index.css';\r\n\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { store } from './store/store';\r\n\r\nReactDOM.render((\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n), document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}