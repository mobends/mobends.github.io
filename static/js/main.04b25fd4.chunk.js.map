{"version":3,"sources":["components/shared/Loader.tsx","store/action.ts","store/types.ts","components/router/Router.tsx","components/router/Link.tsx","helpers/classNameHelper.ts","components/HeaderNavigation.tsx","components/Header.tsx","components/PackListEntry.tsx","services/apiService.ts","components/PacksPage.tsx","components/shared/Button.tsx","components/PlayerCounter.tsx","components/HomePage.tsx","components/router/Route.tsx","components/App.tsx","serviceWorker.js","store/store.ts","index.js","logo.svg","banner.svg"],"names":["Loader","className","style","animationDelay","delay","changePage","page","type","constructUrlFromParams","url","window","location","origin","pathname","extractParamsFromUrl","URL","searchParams","get","Router","children","dispatch","useDispatch","useEffect","href","handlePopState","e","state","addEventListener","removeEventListener","Link","object","to","routeToPage","pageName","history","pushState","useRouteToPage","useSelector","classes","active","Object","keys","filter","key","join","onClick","preventDefault","HeaderNavigation","Header","backgroundImage","logo","alt","src","PackListEntry","name","createdOn","likes","toDateString","ApiService","query","fetch","method","headers","body","JSON","stringify","then","r","json","response","data","allBendsPacks","map","id","Date","parseInt","PacksPage","packs","packsList","errorMessage","packsElements","pack","instance","getPacks","setPacks","catch","error","setError","Button","link","PlayerCounter","HomePage","banner","Route","component","App","loading","Boolean","hostname","match","initialState","store","createStore","action","packsMap","forEach","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.04b25fd4.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Loader.scss';\r\n\r\nexport function Loader() {\r\n    const delay = 0.06;\r\n\r\n    return (\r\n        <div className=\"Loader\">\r\n            <span className=\"Loader_dot\" style={{ animationDelay: `${delay * 0}s` }}></span>\r\n            <span className=\"Loader_dot\" style={{ animationDelay: `${delay * 1}s` }}></span>\r\n            <span className=\"Loader_dot\" style={{ animationDelay: `${delay * 2}s` }}></span>\r\n        </div>\r\n    );\r\n}","import { SET_PACKS, ChangePageAction, BendsPack, SetPacksAction, CHANGE_PAGE, SetErrorAction, SET_ERROR, StartLoadingAction, START_LOADING } from './types';\r\n\r\nexport function changePage(page: string | null): ChangePageAction {\r\n    return { type: CHANGE_PAGE, page };\r\n}\r\n\r\nexport function setPacks(packs: BendsPack[]): SetPacksAction {\r\n    return { type: SET_PACKS, packs };\r\n}\r\n\r\nexport function startLoading(): StartLoadingAction {\r\n    return { type: START_LOADING };\r\n}\r\n\r\nexport function setError(error: string): SetErrorAction {\r\n    return { type: SET_ERROR, error };\r\n}","export const CHANGE_PAGE = 'CHANGE_PAGE';\r\nexport const SET_PACKS = 'SET_PACKS';\r\nexport const START_LOADING = 'START_LOADING';\r\nexport const SET_ERROR = 'SET_ERROR';\r\n\r\nexport interface ChangePageAction {\r\n    type: typeof CHANGE_PAGE\r\n    page: string | null\r\n}\r\n\r\nexport interface SetPacksAction {\r\n    type: typeof SET_PACKS\r\n    packs: BendsPack[]\r\n}\r\n\r\nexport interface StartLoadingAction {\r\n    type: typeof START_LOADING\r\n}\r\n\r\nexport interface SetErrorAction {\r\n    type: typeof SET_ERROR\r\n    error: string\r\n}\r\n\r\nexport type Action = ChangePageAction | SetPacksAction | StartLoadingAction | SetErrorAction;\r\n\r\nexport interface BendsPack {\r\n    id: string\r\n    name: string\r\n    likes: number\r\n    createdOn: Date\r\n}\r\n\r\nexport type Dict<T> = {[key: string]: T};\r\n\r\nexport interface RootState {\r\n    page: string | null\r\n    packs: Dict<BendsPack>\r\n    packsList: string[]\r\n    loading: boolean\r\n    errorMessage: string\r\n}","import React, { useEffect, ReactNode } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { changePage } from '../../store/action';\r\n\r\nexport interface RouterProps {\r\n    children?: ReactNode\r\n}\r\n\r\ninterface RouteParams {\r\n    page: string | null\r\n}\r\n\r\nexport function constructUrlFromParams({ page }: RouteParams): string {\r\n    let url = window.location.origin + window.location.pathname;\r\n    if (page) {\r\n        url += `?page=${page}`;\r\n    }\r\n    return url;\r\n}\r\n\r\nexport function useRouteToPage() {\r\n    const dispatch = useDispatch();\r\n\r\n    return (pageName: string | null) => {\r\n        let url = constructUrlFromParams({ page: pageName });\r\n\r\n        window.history.pushState({\r\n            url,\r\n        }, '', url);\r\n\r\n        dispatch(changePage(pageName));\r\n    }\r\n}\r\n\r\nexport function extractParamsFromUrl(url: string) {\r\n    const urlObject = new URL(url);\r\n    const searchParams = urlObject.searchParams;\r\n\r\n    return {\r\n        page: searchParams.get('page'),\r\n    };\r\n}\r\n\r\nexport function Router({ children }: RouterProps) {\r\n    const dispatch = useDispatch();\r\n    \r\n    useEffect(() => {\r\n        const { page } = extractParamsFromUrl(window.location.href);\r\n        dispatch(changePage(page));\r\n    }, [ dispatch ]);\r\n\r\n    useEffect(() => {\r\n        const handlePopState = (e: PopStateEvent) => {\r\n            if (e.state) {\r\n                const { page } = extractParamsFromUrl(e.state.url);\r\n                dispatch(changePage(page));\r\n            }\r\n        };\r\n        window.addEventListener('popstate', handlePopState);\r\n        return () => window.removeEventListener('popstate', handlePopState);\r\n    }, [ dispatch ]);\r\n\r\n    return <div>{ children }</div>;\r\n}","import React, { ReactNode } from 'react';\r\nimport { useRouteToPage, constructUrlFromParams } from './Router';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../store/types';\r\nimport { combineClasses } from '../../helpers/classNameHelper';\r\n\r\nexport interface LinkProps {\r\n    children?: ReactNode\r\n    className?: string\r\n    to: string | null\r\n}\r\n\r\nexport function Link({ className, children, to }: LinkProps) {\r\n\r\n    const routeToPage = useRouteToPage();\r\n    const page = useSelector((state: RootState) => state.page);\r\n\r\n    const handleClick = (e: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\r\n        e.preventDefault();\r\n        routeToPage(to);\r\n    };\r\n\r\n    const classes = combineClasses({\r\n        active: page === to,\r\n    });\r\n\r\n    return (\r\n        <a href={constructUrlFromParams({ page: to })} onClick={handleClick} className={[className, classes].join(' ')}>\r\n            { children }\r\n        </a>\r\n    );\r\n}","export function combineClasses(object: {[key: string]: boolean}): string {\r\n    return Object.keys(object).filter(key => object[key]).join(' ');\r\n}","import React from 'react';\r\nimport './HeaderNavigation.scss';\r\nimport { Link } from './router/Link';\r\n\r\nexport function HeaderNavigation() {\r\n    return (\r\n        <nav className='HeaderNavigation'>\r\n            <Link to={null}>Home</Link>\r\n            <Link to='packs'>Get Packs</Link>\r\n        </nav>\r\n    );\r\n}","import React from 'react';\r\nimport './Header.scss';\r\n\r\nimport { HeaderNavigation } from './HeaderNavigation';\r\nimport logo from '../logo.svg';\r\nimport { Link } from './router/Link';\r\n\r\nexport function Header() {\r\n    return (\r\n        <header className=\"Header\">\r\n            <Link className=\"Header_logo\" to={null}>\r\n                <span style={{ backgroundImage: `url(${logo})` }}></span>\r\n                <img alt='Logo' src={logo}></img>\r\n            </Link>\r\n            \r\n            <HeaderNavigation />\r\n        </header>\r\n    );\r\n}","import React from 'react';\r\nimport './PackListEntry.scss';\r\n\r\nexport interface PackListEntryProps {\r\n    name: string\r\n    createdOn: Date\r\n    likes: number\r\n}\r\n\r\nexport function PackListEntry({ name, createdOn, likes }: PackListEntryProps) {\r\n    return (\r\n        <div className='PackListEntry'>\r\n            <header>\r\n                <h1>{ name }</h1>\r\n                <p>{ likes } likes</p>\r\n                <p>Created on { createdOn.toDateString() }</p>\r\n            </header>\r\n        </div>\r\n    );\r\n}","import { BendsPack } from '../store/types';\r\n\r\nconst API_ENDPOINT = 'http://localhost:5200/graphql';\r\n\r\nconst getAllBendsPacksQuery = `\r\nquery GetAllBendsPacks($sortBy: SortingType) {\r\n    allBendsPacks(sortBy: $sortBy) {\r\n        id\r\n        name\r\n        createdOn\r\n        likes\r\n    }\r\n}\r\n`;\r\n\r\nfunction executeQuery(query: string) {\r\n    return fetch(API_ENDPOINT, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ query }),\r\n    }).then(r => r.json());\r\n}\r\n\r\nexport class ApiService {\r\n\r\n    public static readonly instance = new ApiService();\r\n\r\n    public async getPacks(): Promise<BendsPack[]> {\r\n        const response = await executeQuery(getAllBendsPacksQuery);\r\n        return response.data.allBendsPacks.map((r: any) => ({\r\n            id: r.id,\r\n            name: r.name,\r\n            createdOn: new Date(parseInt(r.createdOn)),\r\n            likes: r.likes,\r\n        }));\r\n    }\r\n\r\n}","import React, { useEffect } from 'react';\r\nimport './PacksPage.scss';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootState } from '../store/types';\r\nimport { PackListEntry } from './PackListEntry';\r\nimport { ApiService } from '../services/apiService';\r\nimport { setPacks, setError, startLoading } from '../store/action';\r\n\r\nexport function PacksPage() {\r\n    const packs = useSelector((state: RootState) => state.packs);\r\n    const packsList = useSelector((state: RootState) => state.packsList);\r\n    const errorMessage = useSelector((state: RootState) => state.errorMessage);\r\n    const dispatch = useDispatch();\r\n\r\n    const packsElements = packsList.map(key => packs[key]).map(pack => {\r\n        return <PackListEntry key={pack.id} name={pack.name} createdOn={pack.createdOn} likes={pack.likes} />;\r\n    });\r\n\r\n    useEffect(() => {\r\n        dispatch(startLoading());\r\n\r\n        ApiService.instance.getPacks().then(packs => {\r\n            dispatch(setPacks(packs));\r\n        }).catch(error => {\r\n            dispatch(setError(`Couldn't establish a connection :(`));\r\n        });\r\n    }, [ dispatch ]);\r\n\r\n    return (\r\n        <div className=\"PacksPage\">\r\n            <div className=\"PackPage_error\">{ errorMessage }</div>\r\n            { packsElements }\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport './Button.scss';\r\n\r\nexport interface ButtonProps {\r\n    children?: React.ReactChild\r\n    link?: string,\r\n}\r\n\r\nexport function Button({ children, link }: ButtonProps) {\r\n    if (link) {\r\n        return <a className=\"Button\" href={link}>{ children }</a>;\r\n    } else {\r\n        return <button className=\"Button\">{ children }</button>;\r\n    }\r\n}","import React from 'react';\r\nimport './PlayerCounter.scss';\r\n\r\nimport { Button } from './shared/Button';\r\n\r\nexport function PlayerCounter() {\r\n    return (\r\n        <div className=\"PlayerCounter\">\r\n            <p>Online users of Mo' Bends:</p>\r\n            <p className=\"count\">15</p>\r\n            <Button link=\"https://www.curseforge.com/minecraft/mc-mods/mo-bends\">Download Mo' Bends</Button>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport './HomePage.scss';\r\n\r\nimport { PlayerCounter } from './PlayerCounter';\r\nimport banner from '../banner.svg';\r\n\r\nexport function HomePage() {\r\n    return (\r\n        <div className=\"HomePage\">\r\n            <img className=\"HomePage_banner\" alt=\"Banner\" src={banner} />\r\n            <PlayerCounter />\r\n        </div>\r\n    );\r\n}","import { useSelector } from 'react-redux';\r\nimport { RootState } from '../../store/types';\r\n\r\nexport interface RouteProps {\r\n    page: string | null\r\n    component: JSX.Element\r\n}\r\n\r\nexport function Route({page, component}: RouteProps) {\r\n    const currentPage = useSelector((state: RootState) => state.page);\r\n\r\n    const showRoute = page === currentPage;\r\n    return showRoute ? component : null;\r\n}","import React from 'react';\r\nimport './App.scss';\r\n\r\nimport SimpleBar from 'simplebar-react';\r\nimport 'simplebar/dist/simplebar.min.css';\r\nimport { Loader } from './shared/Loader';\r\nimport { Header } from './Header';\r\nimport { PacksPage } from './PacksPage';\r\nimport { HomePage } from './HomePage';\r\nimport { Route } from './router/Route';\r\nimport { Router } from './router/Router';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../store/types';\r\n\r\nfunction App() {\r\n  const loading = useSelector((state: RootState) => state.loading);\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Header />\r\n        <div className=\"App_content\">\r\n          <SimpleBar>\r\n            <Route page=\"packs\" component={<PacksPage />} />\r\n            <Route page={null} component={<HomePage />} />\r\n          </SimpleBar>\r\n        </div>\r\n        { loading ? (<Loader />) : null }\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { createStore } from 'redux';\r\nimport { RootState, SET_PACKS, CHANGE_PAGE, BendsPack, Action, SET_ERROR, START_LOADING } from './types';\r\n\r\nconst initialState: RootState = {\r\n    page: null,\r\n    packs: {},\r\n    packsList: [],\r\n    loading: false,\r\n    errorMessage: '',\r\n};\r\n\r\nconst reducer = (state: RootState = initialState, action: Action) => {\r\n    switch(action.type) {\r\n        case CHANGE_PAGE:\r\n            return {\r\n                ...state,\r\n                page: action.page,\r\n            };\r\n        case SET_PACKS:\r\n            const packsMap: {[key: string]: BendsPack} = {};\r\n            action.packs.forEach(pack => packsMap[pack.id] = pack);\r\n\r\n            return {\r\n                ...state,\r\n                packs: {\r\n                    ...state.packs,\r\n                    ...packsMap,\r\n                },\r\n                packsList: action.packs.map(pack => pack.id),\r\n            };\r\n        case START_LOADING:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                errorMessage: '',\r\n            };\r\n        case SET_ERROR:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                errorMessage: action.error,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const store = createStore(\r\n    reducer,\r\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__()\r\n);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport './index.css';\r\n\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { store } from './store/store';\r\n\r\nReactDOM.render((\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n), document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.577e9581.svg\";","module.exports = __webpack_public_path__ + \"static/media/banner.2918e97a.svg\";"],"sourceRoot":""}