{"version":3,"sources":["logo.svg","store/types.ts","store/action.ts","components/router/Router.tsx","components/router/Link.tsx","components/HeaderNavigation.tsx","components/Header.tsx","components/PackListEntry.tsx","components/PacksPage.tsx","components/router/Route.tsx","components/App.tsx","serviceWorker.js","store/store.ts","index.js"],"names":["module","exports","CHANGE_PAGE","changePage","page","type","useRouteToPage","dispatch","useDispatch","pageName","url","window","location","origin","pathname","constructUrlFromParams","history","pushState","extractParamsFromUrl","URL","searchParams","get","Router","children","useEffect","href","handlePopState","e","state","addEventListener","removeEventListener","Link","to","routeToPage","useSelector","onClick","preventDefault","className","HeaderNavigation","Header","alt","src","logo","PackListEntry","name","PacksPage","packs","packsElements","packsList","map","key","pack","Route","component","App","Boolean","hostname","match","initialState","id","store","createStore","action","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0HAAAA,EAAOC,QAAU,IAA0B,kC,wOCA9BC,G,wBAAc,eCEpB,SAASC,EAAWC,GACvB,MAAO,CAAEC,KAAMH,EAAaE,QCiBzB,SAASE,IACZ,IAAMC,EAAWC,cAEjB,OAAO,SAACC,GACJ,IAAIC,EAZL,YAAgE,IAA9BN,EAA6B,EAA7BA,KACjCM,EAAMC,OAAOC,SAASC,OAASF,OAAOC,SAASE,SAInD,OAHIV,IACAM,GAAG,gBAAaN,IAEbM,EAOOK,CAAuB,CAAEX,KAAMK,IAEzCE,OAAOK,QAAQC,UAAU,CACrBP,OACD,GAAIA,GAEPH,EAASJ,EAAWM,KAIrB,SAASS,EAAqBR,GAIjC,MAAO,CACHN,KAJc,IAAIe,IAAIT,GACKU,aAGRC,IAAI,SAIxB,SAASC,EAAT,GAA4C,IAA1BC,EAAyB,EAAzBA,SACfhB,EAAWC,cAkBjB,OAhBAgB,oBAAU,WAAO,IACLpB,EAASc,EAAqBP,OAAOC,SAASa,MAA9CrB,KACRG,EAASJ,EAAWC,KACrB,IAEHoB,oBAAU,WACN,IAAME,EAAiB,SAACC,GACpB,GAAIA,EAAEC,MAAO,CAAC,IACFxB,EAASc,EAAqBS,EAAEC,MAAMlB,KAAtCN,KACRG,EAASJ,EAAWC,MAI5B,OADAO,OAAOkB,iBAAiB,WAAYH,GAC7B,kBAAMf,OAAOmB,oBAAoB,WAAYJ,KACrD,CAAEnB,IAEE,6BAAOgB,GCpDX,SAASQ,EAAT,GAA4C,IAA5BR,EAA2B,EAA3BA,SAAUS,EAAiB,EAAjBA,GAEvBC,EAAc3B,IACdF,EAAO8B,YAAY,SAACN,GAAD,OAAsBA,EAAMxB,OAOrD,OACI,uBAAGqB,KAAK,IAAIU,QANI,SAACR,GACjBA,EAAES,iBACFH,EAAYD,IAIsBK,UAAWjC,IAAS4B,EAAK,SAAW,IAChET,GClBP,SAASe,IACZ,OACI,yBAAKD,UAAU,oBACX,kBAACN,EAAD,CAAMC,GAAI,MAAV,QACA,kBAACD,EAAD,CAAMC,GAAG,SAAT,U,qBCDL,SAASO,IACZ,OACI,4BAAQF,UAAU,UACd,yBAAKA,UAAU,cAAcG,IAAI,OAAOC,IAAKC,MAE7C,kBAAC,EAAD,O,YCLL,SAASC,EAAT,GAAsD,IAA7BC,EAA4B,EAA5BA,KAC5B,OACI,yBAAKP,UAAU,iBACX,gCACI,4BAAMO,KCLf,SAASC,IACZ,IAAMC,EAAQZ,YAAY,SAACN,GAAD,OAAsBA,EAAMkB,QAGhDC,EAFYb,YAAY,SAACN,GAAD,OAAsBA,EAAMoB,YAE1BC,IAAI,SAAAC,GAAG,OAAIJ,EAAMI,KAAMD,IAAI,SAAAE,GACvD,OAAO,kBAAC,EAAD,CAAeP,KAAMO,EAAKP,SAGrC,OACI,yBAAKP,UAAU,aACTU,GCRP,SAASK,EAAT,GAA+C,IAA/BhD,EAA8B,EAA9BA,KAAMiD,EAAwB,EAAxBA,UAIzB,OADkBjD,IAFE8B,YAAY,SAACN,GAAD,OAAsBA,EAAMxB,OAGzCiD,EAAY,KCSpBC,MAbf,WACE,OACE,kBAAChC,EAAD,KACE,yBAAKe,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,eACb,kBAACe,EAAD,CAAOhD,KAAK,QAAQiD,UAAW,kBAAC,EAAD,YCFrBE,QACW,cAA7B5C,OAAOC,SAAS4C,UAEe,UAA7B7C,OAAOC,SAAS4C,UAEhB7C,OAAOC,SAAS4C,SAASC,MACvB,2D,skBCfN,IAAMC,EAA0B,CAC5BtD,KAAM,KACN0C,MAAO,CACH,EAAK,CACDa,GAAI,IACJf,KAAM,UAGdI,UAAW,CAAC,IAAK,IAAK,IAAK,MAelBY,EAAQC,YAZL,WAAmD,IAAlDjC,EAAiD,uDAA9B8B,EAAcI,EAAgB,uCAC9D,OAAOA,EAAOzD,MACV,KAAKH,EACD,OAAO,EAAP,GACO0B,EADP,CAEIxB,KAAM0D,EAAO1D,OAErB,QACI,OAAOwB,IAMdjB,OAAeoD,8BAAiCpD,OAAeoD,gCCnBpEC,IAASC,OACL,kBAAC,IAAD,CAAUL,MAAOA,GACb,kBAAC,EAAD,OAELM,SAASC,eAAe,SFoHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.552bf984.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ae69a504.svg\";","export const CHANGE_PAGE = 'CHANGE_PAGE';\r\nexport interface ChangePageAction {\r\n    type: typeof CHANGE_PAGE,\r\n    page: string | null;\r\n}\r\n\r\ninterface Pack {\r\n    id: string\r\n    name: string\r\n}\r\n\r\ntype Dict<T> = {[key: string]: T};\r\n\r\nexport interface RootState {\r\n    page: string | null\r\n    packs: Dict<Pack>\r\n    packsList: string[]\r\n}","import { CHANGE_PAGE, ChangePageAction } from './types';\r\n\r\nexport function changePage(page: string | null): ChangePageAction {\r\n    return { type: CHANGE_PAGE, page };\r\n}","import React, { useEffect, ReactNode } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { changePage } from '../../store/action';\r\n\r\nexport interface RouterProps {\r\n    children?: ReactNode\r\n}\r\n\r\ninterface RouteParams {\r\n    page: string | null\r\n}\r\n\r\nexport function constructUrlFromParams({ page }: RouteParams): string {\r\n    let url = window.location.origin + window.location.pathname;\r\n    if (page) {\r\n        url += `?page=${page}`;\r\n    }\r\n    return url;\r\n}\r\n\r\nexport function useRouteToPage() {\r\n    const dispatch = useDispatch();\r\n\r\n    return (pageName: string | null) => {\r\n        let url = constructUrlFromParams({ page: pageName });\r\n\r\n        window.history.pushState({\r\n            url,\r\n        }, '', url);\r\n\r\n        dispatch(changePage(pageName));\r\n    }\r\n}\r\n\r\nexport function extractParamsFromUrl(url: string) {\r\n    const urlObject = new URL(url);\r\n    const searchParams = urlObject.searchParams;\r\n\r\n    return {\r\n        page: searchParams.get('page'),\r\n    };\r\n}\r\n\r\nexport function Router({ children }: RouterProps) {\r\n    const dispatch = useDispatch();\r\n    \r\n    useEffect(() => {\r\n        const { page } = extractParamsFromUrl(window.location.href);\r\n        dispatch(changePage(page));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const handlePopState = (e: PopStateEvent) => {\r\n            if (e.state) {\r\n                const { page } = extractParamsFromUrl(e.state.url);\r\n                dispatch(changePage(page));\r\n            }\r\n        };\r\n        window.addEventListener('popstate', handlePopState);\r\n        return () => window.removeEventListener('popstate', handlePopState);\r\n    }, [ dispatch ]);\r\n\r\n    return <div>{ children }</div>;\r\n}","import React, { ReactNode } from 'react';\r\nimport { useRouteToPage } from './Router';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../store/types';\r\n\r\nexport interface LinkProps {\r\n    children?: ReactNode\r\n    to: string | null\r\n}\r\n\r\nexport function Link({ children, to }: LinkProps) {\r\n\r\n    const routeToPage = useRouteToPage();\r\n    const page = useSelector((state: RootState) => state.page);\r\n\r\n    const handleClick = (e: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\r\n        e.preventDefault();\r\n        routeToPage(to);\r\n    };\r\n\r\n    return (\r\n        <a href='#' onClick={handleClick} className={page === to ? 'active' : ''}>\r\n            { children }\r\n        </a>\r\n    );\r\n}","import React from 'react';\r\nimport './HeaderNavigation.scss';\r\nimport { Link } from './router/Link';\r\n\r\nexport function HeaderNavigation() {\r\n    return (\r\n        <nav className='HeaderNavigation'>\r\n            <Link to={null}>Home</Link>\r\n            <Link to='packs'>Packs</Link>\r\n        </nav>\r\n    );\r\n}","import React from 'react';\r\nimport './Header.scss';\r\n\r\nimport { HeaderNavigation } from './HeaderNavigation';\r\nimport logo from '../logo.svg';\r\nimport title from '../title.svg';\r\n\r\nexport function Header() {\r\n    return (\r\n        <header className=\"Header\">\r\n            <img className=\"Header_logo\" alt=\"Logo\" src={logo}></img>\r\n            \r\n            <HeaderNavigation />\r\n        </header>\r\n    );\r\n}","import React from 'react';\r\nimport './PackListEntry.scss';\r\n\r\nexport interface PackListEntryProps {\r\n    name: string\r\n}\r\n\r\nexport function PackListEntry({ name }: PackListEntryProps) {\r\n    return (\r\n        <div className='PackListEntry'>\r\n            <header>\r\n                <h1>{ name }</h1>\r\n            </header>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport './PacksPage.scss';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../store/types';\r\nimport { PackListEntry } from './PackListEntry';\r\n\r\nexport function PacksPage() {\r\n    const packs = useSelector((state: RootState) => state.packs);\r\n    const packsList = useSelector((state: RootState) => state.packsList);\r\n\r\n    const packsElements = packsList.map(key => packs[key]).map(pack => {\r\n        return <PackListEntry name={pack.name} />;\r\n    });\r\n\r\n    return (\r\n        <div className='PacksPage'>\r\n            { packsElements }\r\n        </div>\r\n    );\r\n}","import { useSelector } from 'react-redux';\r\nimport { RootState } from '../../store/types';\r\n\r\nexport interface RouteProps {\r\n    page: string\r\n    component: JSX.Element\r\n}\r\n\r\nexport function Route({page, component}: RouteProps) {\r\n    const currentPage = useSelector((state: RootState) => state.page);\r\n\r\n    const showRoute = page === currentPage;\r\n    return showRoute ? component : null;\r\n}","import React from 'react';\nimport './App.scss';\n\nimport { Header } from './Header';\nimport { PacksPage } from './PacksPage';\nimport { Route } from './router/Route';\nimport { Router } from './router/Router';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Header />\n        <div className=\"App_content\">\n          <Route page=\"packs\" component={<PacksPage />} />\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore } from 'redux';\r\nimport { RootState, CHANGE_PAGE } from './types';\r\n\r\nconst initialState: RootState = {\r\n    page: null,\r\n    packs: {\r\n        '0': {\r\n            id: '0',\r\n            name: 'Roll!',\r\n        },\r\n    },\r\n    packsList: ['0', '0', '0', '0'],\r\n};\r\n\r\nconst reducer = (state: RootState = initialState, action: any) => {\r\n    switch(action.type) {\r\n        case CHANGE_PAGE:\r\n            return {\r\n                ...state,\r\n                page: action.page,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const store = createStore(\r\n    reducer,\r\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__()\r\n);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\n\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './store/store';\n\nReactDOM.render((\n    <Provider store={store}>\n        <App />\n    </Provider>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}